import React, { useEffect, useState } from "react";
import Head from "next/head";
import Footer from "../../Components/Footer/Footer";
import FooterLine from "../../Components/Footer/FooterLine";
import Navbar from "../../Components/Navbar/Navbar";
import ProductDetail from "../../Components/OurProducts/ProductDetail";
import { client } from "../../lib/client";
import { useStateContext } from "../../context/StateContext";
import { useRouter } from "next/router";

const ProductDetails = () => {
  const router = useRouter();
  const { slug } = router?.query;
  const { decQty, incQty, qty, onAdd } = useStateContext();
  const [isLoading, setIsLoading] = useState(true);
  const [productData, setProductData] = useState(null);
  useEffect(() => {
    async function fetchProductData() {
      if (!slug) {
        router.push("/our_products");
      } else {
        const ProductQuery = `*[_type == "product" && slug.current == '${slug}'][0]`;
        const products = await client.fetch(ProductQuery);
        console.log(
          "ðŸš€ ~ file: [slug].js ~ line 22 ~ fetchProductData ~ products",
          products,
        );
        setProductData(products);
        setIsLoading(false);
      }
    }
    fetchProductData();
  }, [slug]);

  return (
    <>
      <Head>
        <title>Bravit | {slug?.toUpperCase()}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <ProductDetail
        product={productData}
        isLoading={isLoading}
        decQty={decQty}
        incQty={incQty}
        qty={qty}
        onAdd={onAdd}
      />
      <Footer />
      <FooterLine />
    </>
  );
};

// export const getStaticPaths = async () => {
//   const query = `*[_type == "product"] {
//     slug {
//       current
//     }
//   }
//   `;

//   const products = await client.fetch(query);

//   const paths = products.map((product) => ({
//     params: {
//       slug: product.slug.current,
//     },
//   }));

//   return {
//     paths,
//     fallback: "blocking",
//   };
// };

// export const getStaticProps = async ({ params: { slug } }) => {
//   const query = `*[_type == "product" && slug.current == '${slug}'][0]`;
//   const productsQuery = '*[_type == "product"]';

//   const product = await client.fetch(query);
//   const products = await client.fetch(productsQuery);

//   console.log(product);

//   return {
//     props: { products, product, slug },
//   };
// };

export default ProductDetails;
